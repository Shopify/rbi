# typed: true
# frozen_string_literal: true

require "test_helper"

module RBI
  class GenerateTest < Minitest::Test
    extend T::Sig
    include TestHelper

    def test_bump_unregistered_gem
      project = self.project("test_bump_unregistered_gem")

      project.gemfile(<<~GEMFILE)
        source "https://rubygems.org"

        gem "tapioca"
        gem "rbi", path: "#{File.expand_path(Bundler.root)}"
      GEMFILE

      project.write("index_mock.json", "{}")

      Bundler.with_unbundled_env do
        project.run("bundle config set --local path 'vendor/bundle'")
        project.run("bundle install")

        index = "--mock-index-file index_mock.json"
        _, err, status = project.bundle_exec("rbi bump colorize 1.0.0 --no-netrc #{index} --no-color")
        assert_log(<<~OUT, err)
          Error: No RBI for `colorize` in the central repo, run `rbi generate colorize` to create it
        OUT
        refute(status)
      end

      project.destroy
    end

    def test_bump_indexed_gem_version
      project = self.project("test_bump_indexed_gem_version")

      project.gemfile(<<~GEMFILE)
        source "https://rubygems.org"

        gem "tapioca"
        gem "rbi", path: "#{File.expand_path(Bundler.root)}"
      GEMFILE

      project.write("index_mock.json", <<~JSON)
        {
          "foo@1.0.0": "FOO = 1",
          "foo@2.0.0": "FOO = 2"
        }
      JSON

      Bundler.with_unbundled_env do
        project.run("bundle config set --local path 'vendor/bundle'")
        project.run("bundle install")

        index = "--mock-index-file index_mock.json"
        _, err, status = project.bundle_exec("rbi bump foo 2.0.0 --no-netrc #{index} --no-color")
        assert_log(<<~OUT, err)
          Error: RBI for `foo@2.0.0` already in the central repo, run `rbi update` to pull it
        OUT
        refute(status)
      end

      project.destroy
    end

    def test_bump_gem_with_version
      project = self.project("test_bump_gem_with_version")

      project.gemfile(<<~GEMFILE)
        source "https://rubygems.org"

        gem "tapioca", github: "Shopify/tapioca", branch: "master"
        gem "rbi", path: "#{File.expand_path(Bundler.root)}"
      GEMFILE

      project.write("vendor/cache/foo.gemspec", <<~FOO)
        Gem::Specification.new do |spec|
          spec.name          = "foo"
          spec.version       = "3.0.0"
          spec.authors       = ["Test User"]
          spec.email         = ["test@example.com"]

          spec.summary       = "Foo - Test Gem"
          spec.homepage      = "https://example.com/foo"
          spec.license       = "MIT"

          spec.metadata["allowed_push_host"] = "no"

          spec.require_paths = ["lib"]

          spec.files         = Dir.glob("lib/**/*.rb")
        end
      FOO

      project.write("index_mock.json", <<~JSON)
        {
          "foo@1.0.0": "FOO = 1",
          "foo@2.0.0": "FOO = 2"
        }
      JSON

      Bundler.with_unbundled_env do
        project.run("bundle config set --local path 'vendor/bundle'")
        project.run("bundle install")

        index = "--mock-index-file index_mock.json"
        path = "#{project.path}/vendor/cache/"
        _, err, status = project.bundle_exec("rbi bump foo 3.0.0 --path=#{path} --no-netrc #{index} --no-color")
        assert_log(<<~OUT, err)
          Success: Generated `foo@3.0.0.rbi`
          Success: Merged `foo@2.0.0.rbi` with `foo@3.0.0.rbi`
        OUT
        assert(status)
      end

      content = File.read(project.absolute_path("foo@3.0.0.rbi"))
      assert_equal(<<~RBI.strip, content.strip)
        # DO NOT EDIT MANUALLY
        # This is an autogenerated file for types exported from the `foo` gem.
        # Please instead update this file by running `bin/tapioca sync`.
        # typed: true
        # THIS IS AN EMPTY RBI FILE.
        # see https://github.com/Shopify/tapioca/blob/master/README.md#manual-gem-requires

        FOO = 2
      RBI

      project.destroy
    end
  end
end
