# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for YARP, run `bin/yarp-rbi` instead.

module YARP
  class << self
    # Mirror the YARP.parse API by using the serialization API.
    sig { params(arg: String).returns(YARP::ParseResult)}
    def parse(*arg); end

    # Mirror the YARP.parse_file API by using the serialization API. This uses
    # native strings instead of Ruby strings because it allows us to use mmap when
    # it is available.
    sig { params(path: String).returns(YARP::ParseResult)}
    def parse_file(path); end
  end
end

# This represents the result of a call to ::parse or ::parse_file. It contains
# the AST, any comments that were encounters, and any errors that were
# encountered.
class YARP::ParseResult
  # Returns the value of attribute comments.
  sig { returns(T::Array[YARP::Comment]) }
  def comments; end

  # Returns the value of attribute errors.
  sig { returns(T::Array[YARP::ParseError]) }
  def errors; end

  sig { returns(T::Boolean) }
  def failure?; end

  # Returns the value of attribute source.
  sig { returns(String) }
  def source; end

  sig { returns(T::Boolean) }
  def success?; end

  # Returns the value of attribute value.
  sig { returns(YARP::Node) }
  def value; end

  # Returns the value of attribute warnings.
  sig { returns(T::Array[YARP::ParseWarning]) }
  def warnings; end
end
# Represents the use of the `alias` keyword.
#
#     alias foo bar
#     ^^^^^^^^^^^^^
class YARP::AliasNode
  sig { returns(YARP::Node) }
  attr_reader :new_name

  sig { returns(YARP::Node) }
  attr_reader :old_name

  sig { returns(YARP::Location) }
  attr_reader :keyword_loc
end

# Represents an alternation pattern in pattern matching.
#
#     foo => bar | baz
#            ^^^^^^^^^
class YARP::AlternationPatternNode
  sig { returns(YARP::Node) }
  attr_reader :left

  sig { returns(YARP::Node) }
  attr_reader :right

  sig { returns(YARP::Location) }
  attr_reader :operator_loc
end

# Represents the use of the `&&` operator or the `and` keyword.
#
#     left and right
#     ^^^^^^^^^^^^^^
class YARP::AndNode
  sig { returns(YARP::Node) }
  attr_reader :left

  sig { returns(YARP::Node) }
  attr_reader :right

  sig { returns(YARP::Location) }
  attr_reader :operator_loc
end

# Represents a set of arguments to a method or a keyword.
#
#     return foo, bar, baz
#            ^^^^^^^^^^^^^
class YARP::ArgumentsNode
  sig { returns(T::Array[YARP::Node]) }
  attr_reader :arguments
end

# Represents an array literal. This can be a regular array using brackets or
# a special array using % like %w or %i.
#
#     [1, 2, 3]
#     ^^^^^^^^^
class YARP::ArrayNode
  sig { returns(T::Array[YARP::Node]) }
  attr_reader :elements

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :opening_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :closing_loc
end

# Represents an array pattern in pattern matching.
#
#     foo in 1, 2
#     ^^^^^^^^^^^
#
#     foo in [1, 2]
#     ^^^^^^^^^^^^^
#
#     foo in *1
#     ^^^^^^^^^
#
#     foo in Bar[]
#     ^^^^^^^^^^^^
#
#     foo in Bar[1, 2, 3]
#     ^^^^^^^^^^^^^^^^^^^
class YARP::ArrayPatternNode
  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :constant

  sig { returns(T::Array[YARP::Node]) }
  attr_reader :requireds

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :rest

  sig { returns(T::Array[YARP::Node]) }
  attr_reader :posts

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :opening_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :closing_loc
end

# Represents a hash key/value pair.
#
#     { a => b }
#       ^^^^^^
class YARP::AssocNode
  sig { returns(YARP::Node) }
  attr_reader :key

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :value

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :operator_loc
end

# Represents a splat in a hash literal.
#
#     { **foo }
#       ^^^^^
class YARP::AssocSplatNode
  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :value

  sig { returns(YARP::Location) }
  attr_reader :operator_loc
end

# Represents reading a reference to a field in the previous match.
#
#     $'
#     ^^
class YARP::BackReferenceReadNode; end

# Represents a begin statement.
#
#     begin
#       foo
#     end
#     ^^^^^
class YARP::BeginNode
  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :begin_keyword_loc

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :statements

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :rescue_clause

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :else_clause

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :ensure_clause

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :end_keyword_loc
end

# Represents block method arguments.
#
#     bar(&args)
#     ^^^^^^^^^^
class YARP::BlockArgumentNode
  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :expression

  sig { returns(YARP::Location) }
  attr_reader :operator_loc
end

# Represents a block local variable.
#
#     a { |; b| }
#            ^
class YARP::BlockLocalVariableNode
  sig { returns(Symbol) }
  attr_reader :name
end

# Represents a block of ruby code.
#
# [1, 2, 3].each { |i| puts x }
#                ^^^^^^^^^^^^^^
class YARP::BlockNode
  sig { returns(T::Array[Symbol]) }
  attr_reader :locals

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :parameters

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :body

  sig { returns(YARP::Location) }
  attr_reader :opening_loc

  sig { returns(YARP::Location) }
  attr_reader :closing_loc
end

# Represents a block parameter to a method, block, or lambda definition.
#
#     def a(&b)
#           ^^
#     end
class YARP::BlockParameterNode
  sig { returns(T.nilable(Symbol)) }
  attr_reader :name

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :name_loc

  sig { returns(YARP::Location) }
  attr_reader :operator_loc
end

# Represents a block's parameters declaration.
#
#     -> (a, b = 1; local) { }
#        ^^^^^^^^^^^^^^^^^
#
#     foo do |a, b = 1; local|
#            ^^^^^^^^^^^^^^^^^
#     end
class YARP::BlockParametersNode
  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :parameters

  sig { returns(T::Array[YARP::Node]) }
  attr_reader :locals

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :opening_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :closing_loc
end

# Represents the use of the `break` keyword.
#
#     break foo
#     ^^^^^^^^^
class YARP::BreakNode
  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :arguments

  sig { returns(YARP::Location) }
  attr_reader :keyword_loc
end

# Represents the use of the `&&=` operator on a call.
#
#     foo.bar &&= value
#     ^^^^^^^^^^^^^^^^^
class YARP::CallAndWriteNode
  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :receiver

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :call_operator_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :message_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :opening_loc

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :arguments

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :closing_loc

  sig { returns(Integer) }
  attr_reader :flags

  sig { returns(String) }
  attr_reader :read_name

  sig { returns(String) }
  attr_reader :write_name

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Node) }
  attr_reader :value
end

# Represents a method call, in all of the various forms that can take.
#
#     foo
#     ^^^
#
#     foo()
#     ^^^^^
#
#     +foo
#     ^^^^
#
#     foo + bar
#     ^^^^^^^^^
#
#     foo.bar
#     ^^^^^^^
#
#     foo&.bar
#     ^^^^^^^^
class YARP::CallNode
  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :receiver

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :call_operator_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :message_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :opening_loc

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :arguments

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :closing_loc

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :block

  sig { returns(Integer) }
  attr_reader :flags

  sig { returns(String) }
  attr_reader :name
end

# Represents the use of an assignment operator on a call.
#
#     foo.bar += baz
#     ^^^^^^^^^^^^^^
class YARP::CallOperatorWriteNode
  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :receiver

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :call_operator_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :message_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :opening_loc

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :arguments

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :closing_loc

  sig { returns(Integer) }
  attr_reader :flags

  sig { returns(String) }
  attr_reader :read_name

  sig { returns(String) }
  attr_reader :write_name

  sig { returns(Symbol) }
  attr_reader :operator

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Node) }
  attr_reader :value
end

# Represents the use of the `||=` operator on a call.
#
#     foo.bar ||= value
#     ^^^^^^^^^^^^^^^^^
class YARP::CallOrWriteNode
  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :receiver

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :call_operator_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :message_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :opening_loc

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :arguments

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :closing_loc

  sig { returns(Integer) }
  attr_reader :flags

  sig { returns(String) }
  attr_reader :read_name

  sig { returns(String) }
  attr_reader :write_name

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Node) }
  attr_reader :value
end

# Represents assigning to a local variable in pattern matching.
#
#     foo => [bar => baz]
#            ^^^^^^^^^^^^
class YARP::CapturePatternNode
  sig { returns(YARP::Node) }
  attr_reader :value

  sig { returns(YARP::Node) }
  attr_reader :target

  sig { returns(YARP::Location) }
  attr_reader :operator_loc
end

# Represents the use of a case statement.
#
# case true
# ^^^^^^^^^
# when false
# end
class YARP::CaseNode
  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :predicate

  sig { returns(T::Array[YARP::Node]) }
  attr_reader :conditions

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :consequent

  sig { returns(YARP::Location) }
  attr_reader :case_keyword_loc

  sig { returns(YARP::Location) }
  attr_reader :end_keyword_loc
end

# Represents a class declaration involving the `class` keyword.
#
#     class Foo end
#     ^^^^^^^^^^^^^
class YARP::ClassNode
  sig { returns(T::Array[Symbol]) }
  attr_reader :locals

  sig { returns(YARP::Location) }
  attr_reader :class_keyword_loc

  sig { returns(YARP::Node) }
  attr_reader :constant_path

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :inheritance_operator_loc

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :superclass

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :body

  sig { returns(YARP::Location) }
  attr_reader :end_keyword_loc

  sig { returns(Symbol) }
  attr_reader :name
end

# Represents the use of the `&&=` operator for assignment to a class variable.
#
#     @@target &&= value
#     ^^^^^^^^^^^^^^^^
class YARP::ClassVariableAndWriteNode
  sig { returns(Symbol) }
  attr_reader :name

  sig { returns(YARP::Location) }
  attr_reader :name_loc

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Node) }
  attr_reader :value
end

# Represents assigning to a class variable using an operator that isn't `=`.
#
#     @@target += value
#     ^^^^^^^^^^^^^^^^^
class YARP::ClassVariableOperatorWriteNode
  sig { returns(Symbol) }
  attr_reader :name

  sig { returns(YARP::Location) }
  attr_reader :name_loc

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Node) }
  attr_reader :value

  sig { returns(Symbol) }
  attr_reader :operator
end

# Represents the use of the `||=` operator for assignment to a class variable.
#
#     @@target ||= value
#     ^^^^^^^^^^^^^^^^^^
class YARP::ClassVariableOrWriteNode
  sig { returns(Symbol) }
  attr_reader :name

  sig { returns(YARP::Location) }
  attr_reader :name_loc

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Node) }
  attr_reader :value
end

# Represents referencing a class variable.
#
#     @@foo
#     ^^^^^
class YARP::ClassVariableReadNode
  sig { returns(Symbol) }
  attr_reader :name
end

# Represents writing to a class variable in a context that doesn't have an explicit value.
#
#     @@foo, @@bar = baz
#     ^^^^^  ^^^^^
class YARP::ClassVariableTargetNode
  sig { returns(Symbol) }
  attr_reader :name
end

# Represents writing to a class variable.
#
#     @@foo = 1
#     ^^^^^^^^^
class YARP::ClassVariableWriteNode
  sig { returns(Symbol) }
  attr_reader :name

  sig { returns(YARP::Location) }
  attr_reader :name_loc

  sig { returns(YARP::Node) }
  attr_reader :value

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :operator_loc
end

# Represents the use of the `&&=` operator for assignment to a constant.
#
#     Target &&= value
#     ^^^^^^^^^^^^^^^^
class YARP::ConstantAndWriteNode
  sig { returns(Symbol) }
  attr_reader :name

  sig { returns(YARP::Location) }
  attr_reader :name_loc

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Node) }
  attr_reader :value
end

# Represents assigning to a constant using an operator that isn't `=`.
#
#     Target += value
#     ^^^^^^^^^^^^^^^
class YARP::ConstantOperatorWriteNode
  sig { returns(Symbol) }
  attr_reader :name

  sig { returns(YARP::Location) }
  attr_reader :name_loc

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Node) }
  attr_reader :value

  sig { returns(Symbol) }
  attr_reader :operator
end

# Represents the use of the `||=` operator for assignment to a constant.
#
#     Target ||= value
#     ^^^^^^^^^^^^^^^^
class YARP::ConstantOrWriteNode
  sig { returns(Symbol) }
  attr_reader :name

  sig { returns(YARP::Location) }
  attr_reader :name_loc

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Node) }
  attr_reader :value
end

# Represents the use of the `&&=` operator for assignment to a constant path.
#
#     Parent::Child &&= value
#     ^^^^^^^^^^^^^^^^^^^^^^^
class YARP::ConstantPathAndWriteNode
  sig { returns(YARP::Node) }
  attr_reader :target

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Node) }
  attr_reader :value
end

# Represents accessing a constant through a path of `::` operators.
#
#     Foo::Bar
#     ^^^^^^^^
class YARP::ConstantPathNode
  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :parent

  sig { returns(YARP::Node) }
  attr_reader :child

  sig { returns(YARP::Location) }
  attr_reader :delimiter_loc
end

# Represents assigning to a constant path using an operator that isn't `=`.
#
#     Parent::Child += value
#     ^^^^^^^^^^^^^^^^^^^^^^
class YARP::ConstantPathOperatorWriteNode
  sig { returns(YARP::Node) }
  attr_reader :target

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Node) }
  attr_reader :value

  sig { returns(Symbol) }
  attr_reader :operator
end

# Represents the use of the `||=` operator for assignment to a constant path.
#
#     Parent::Child ||= value
#     ^^^^^^^^^^^^^^^^^^^^^^^
class YARP::ConstantPathOrWriteNode
  sig { returns(YARP::Node) }
  attr_reader :target

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Node) }
  attr_reader :value
end

# Represents writing to a constant path in a context that doesn't have an explicit value.
#
#     Foo::Foo, Bar::Bar = baz
#     ^^^^^^^^  ^^^^^^^^
class YARP::ConstantPathTargetNode
  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :parent

  sig { returns(YARP::Node) }
  attr_reader :child

  sig { returns(YARP::Location) }
  attr_reader :delimiter_loc
end

# Represents writing to a constant path.
#
#     ::Foo = 1
#     ^^^^^^^^^
#
#     Foo::Bar = 1
#     ^^^^^^^^^^^^
#
#     ::Foo::Bar = 1
#     ^^^^^^^^^^^^^^
class YARP::ConstantPathWriteNode
  sig { returns(YARP::Node) }
  attr_reader :target

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Node) }
  attr_reader :value
end

# Represents referencing a constant.
#
#     Foo
#     ^^^
class YARP::ConstantReadNode
  sig { returns(Symbol) }
  attr_reader :name
end

# Represents writing to a constant in a context that doesn't have an explicit value.
#
#     Foo, Bar = baz
#     ^^^  ^^^
class YARP::ConstantTargetNode
  sig { returns(Symbol) }
  attr_reader :name
end

# Represents writing to a constant.
#
#     Foo = 1
#     ^^^^^^^
class YARP::ConstantWriteNode
  sig { returns(Symbol) }
  attr_reader :name

  sig { returns(YARP::Location) }
  attr_reader :name_loc

  sig { returns(YARP::Node) }
  attr_reader :value

  sig { returns(YARP::Location) }
  attr_reader :operator_loc
end

# Represents a method definition.
#
#     def method
#     end
#     ^^^^^^^^^^
class YARP::DefNode
  sig { returns(Symbol) }
  attr_reader :name

  sig { returns(YARP::Location) }
  attr_reader :name_loc

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :receiver

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :parameters

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :body

  sig { returns(T::Array[Symbol]) }
  attr_reader :locals

  sig { returns(YARP::Location) }
  attr_reader :def_keyword_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :operator_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :lparen_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :rparen_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :equal_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :end_keyword_loc
end

# Represents the use of the `defined?` keyword.
#
#     defined?(a)
#     ^^^^^^^^^^^
class YARP::DefinedNode
  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :lparen_loc

  sig { returns(YARP::Node) }
  attr_reader :value

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :rparen_loc

  sig { returns(YARP::Location) }
  attr_reader :keyword_loc
end

# Represents an `else` clause in a `case`, `if`, or `unless` statement.
#
#     if a then b else c end
#                 ^^^^^^^^^^
class YARP::ElseNode
  sig { returns(YARP::Location) }
  attr_reader :else_keyword_loc

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :statements

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :end_keyword_loc
end

# Represents an interpolated set of statements.
#
#     "foo #{bar}"
#          ^^^^^^
class YARP::EmbeddedStatementsNode
  sig { returns(YARP::Location) }
  attr_reader :opening_loc

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :statements

  sig { returns(YARP::Location) }
  attr_reader :closing_loc
end

# Represents an interpolated variable.
#
#     "foo #@bar"
#          ^^^^^
class YARP::EmbeddedVariableNode
  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Node) }
  attr_reader :variable
end

# Represents an `ensure` clause in a `begin` statement.
#
#     begin
#       foo
#     ensure
#     ^^^^^^
#       bar
#     end
class YARP::EnsureNode
  sig { returns(YARP::Location) }
  attr_reader :ensure_keyword_loc

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :statements

  sig { returns(YARP::Location) }
  attr_reader :end_keyword_loc
end

# Represents the use of the literal `false` keyword.
#
#     false
#     ^^^^^
class YARP::FalseNode; end

# Represents a find pattern in pattern matching.
#
#     foo in *bar, baz, *qux
#     ^^^^^^^^^^^^^^^^^^^^^^
#
#     foo in [*bar, baz, *qux]
#     ^^^^^^^^^^^^^^^^^^^^^^^^
#
#     foo in Foo(*bar, baz, *qux)
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
class YARP::FindPatternNode
  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :constant

  sig { returns(YARP::Node) }
  attr_reader :left

  sig { returns(T::Array[YARP::Node]) }
  attr_reader :requireds

  sig { returns(YARP::Node) }
  attr_reader :right

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :opening_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :closing_loc
end

# Represents the use of the `..` or `...` operators to create flip flops.
#
#     baz if foo .. bar
#            ^^^^^^^^^^
class YARP::FlipFlopNode
  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :left

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :right

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(Integer) }
  attr_reader :flags
end

# Represents a floating point number literal.
#
#     1.0
#     ^^^
class YARP::FloatNode; end

# Represents the use of the `for` keyword.
#
#     for i in a end
#     ^^^^^^^^^^^^^^
class YARP::ForNode
  sig { returns(YARP::Node) }
  attr_reader :index

  sig { returns(YARP::Node) }
  attr_reader :collection

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :statements

  sig { returns(YARP::Location) }
  attr_reader :for_keyword_loc

  sig { returns(YARP::Location) }
  attr_reader :in_keyword_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :do_keyword_loc

  sig { returns(YARP::Location) }
  attr_reader :end_keyword_loc
end

# Represents forwarding all arguments to this method to another method.
#
#     def foo(...)
#       bar(...)
#       ^^^^^^^^
#     end
class YARP::ForwardingArgumentsNode; end

# Represents the use of the forwarding parameter in a method, block, or lambda declaration.
#
#     def foo(...)
#             ^^^
#     end
class YARP::ForwardingParameterNode; end

# Represents the use of the `super` keyword without parentheses or arguments.
#
#     super
#     ^^^^^
class YARP::ForwardingSuperNode
  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :block
end

# Represents the use of the `&&=` operator for assignment to a global variable.
#
#     $target &&= value
#     ^^^^^^^^^^^^^^^^^
class YARP::GlobalVariableAndWriteNode
  sig { returns(Symbol) }
  attr_reader :name

  sig { returns(YARP::Location) }
  attr_reader :name_loc

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Node) }
  attr_reader :value
end

# Represents assigning to a global variable using an operator that isn't `=`.
#
#     $target += value
#     ^^^^^^^^^^^^^^^^
class YARP::GlobalVariableOperatorWriteNode
  sig { returns(Symbol) }
  attr_reader :name

  sig { returns(YARP::Location) }
  attr_reader :name_loc

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Node) }
  attr_reader :value

  sig { returns(Symbol) }
  attr_reader :operator
end

# Represents the use of the `||=` operator for assignment to a global variable.
#
#     $target ||= value
#     ^^^^^^^^^^^^^^^^^
class YARP::GlobalVariableOrWriteNode
  sig { returns(Symbol) }
  attr_reader :name

  sig { returns(YARP::Location) }
  attr_reader :name_loc

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Node) }
  attr_reader :value
end

# Represents referencing a global variable.
#
#     $foo
#     ^^^^
class YARP::GlobalVariableReadNode
  sig { returns(Symbol) }
  attr_reader :name
end

# Represents writing to a global variable in a context that doesn't have an explicit value.
#
#     $foo, $bar = baz
#     ^^^^  ^^^^
class YARP::GlobalVariableTargetNode
  sig { returns(Symbol) }
  attr_reader :name
end

# Represents writing to a global variable.
#
#     $foo = 1
#     ^^^^^^^^
class YARP::GlobalVariableWriteNode
  sig { returns(Symbol) }
  attr_reader :name

  sig { returns(YARP::Location) }
  attr_reader :name_loc

  sig { returns(YARP::Node) }
  attr_reader :value

  sig { returns(YARP::Location) }
  attr_reader :operator_loc
end

# Represents a hash literal.
#
#     { a => b }
#     ^^^^^^^^^^
class YARP::HashNode
  sig { returns(YARP::Location) }
  attr_reader :opening_loc

  sig { returns(T::Array[YARP::Node]) }
  attr_reader :elements

  sig { returns(YARP::Location) }
  attr_reader :closing_loc
end

# Represents a hash pattern in pattern matching.
#
#     foo => { a: 1, b: 2 }
#            ^^^^^^^^^^^^^^
#
#     foo => { a: 1, b: 2, **c }
#            ^^^^^^^^^^^^^^^^^^^
class YARP::HashPatternNode
  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :constant

  sig { returns(T::Array[YARP::Node]) }
  attr_reader :assocs

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :kwrest

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :opening_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :closing_loc
end

# Represents the use of the `if` keyword, either in the block form or the modifier form.
#
#     bar if foo
#     ^^^^^^^^^^
#
#     if foo then bar end
#     ^^^^^^^^^^^^^^^^^^^
class YARP::IfNode
  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :if_keyword_loc

  sig { returns(YARP::Node) }
  attr_reader :predicate

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :statements

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :consequent

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :end_keyword_loc
end

# Represents an imaginary number literal.
#
#     1.0i
#     ^^^^
class YARP::ImaginaryNode
  sig { returns(YARP::Node) }
  attr_reader :numeric
end

# Represents the use of the `in` keyword in a case statement.
#
#     case a; in b then c end
#             ^^^^^^^^^^^
class YARP::InNode
  sig { returns(YARP::Node) }
  attr_reader :pattern

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :statements

  sig { returns(YARP::Location) }
  attr_reader :in_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :then_loc
end

# Represents the use of the `&&=` operator for assignment to an instance variable.
#
#     @target &&= value
#     ^^^^^^^^^^^^^^^^^
class YARP::InstanceVariableAndWriteNode
  sig { returns(Symbol) }
  attr_reader :name

  sig { returns(YARP::Location) }
  attr_reader :name_loc

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Node) }
  attr_reader :value
end

# Represents assigning to an instance variable using an operator that isn't `=`.
#
#     @target += value
#     ^^^^^^^^^^^^^^^^
class YARP::InstanceVariableOperatorWriteNode
  sig { returns(Symbol) }
  attr_reader :name

  sig { returns(YARP::Location) }
  attr_reader :name_loc

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Node) }
  attr_reader :value

  sig { returns(Symbol) }
  attr_reader :operator
end

# Represents the use of the `||=` operator for assignment to an instance variable.
#
#     @target ||= value
#     ^^^^^^^^^^^^^^^^^
class YARP::InstanceVariableOrWriteNode
  sig { returns(Symbol) }
  attr_reader :name

  sig { returns(YARP::Location) }
  attr_reader :name_loc

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Node) }
  attr_reader :value
end

# Represents referencing an instance variable.
#
#     @foo
#     ^^^^
class YARP::InstanceVariableReadNode
  sig { returns(Symbol) }
  attr_reader :name
end

# Represents writing to an instance variable in a context that doesn't have an explicit value.
#
#     @foo, @bar = baz
#     ^^^^  ^^^^
class YARP::InstanceVariableTargetNode
  sig { returns(Symbol) }
  attr_reader :name
end

# Represents writing to an instance variable.
#
#     @foo = 1
#     ^^^^^^^^
class YARP::InstanceVariableWriteNode
  sig { returns(Symbol) }
  attr_reader :name

  sig { returns(YARP::Location) }
  attr_reader :name_loc

  sig { returns(YARP::Node) }
  attr_reader :value

  sig { returns(YARP::Location) }
  attr_reader :operator_loc
end

# Represents an integer number literal.
#
#     1
#     ^
class YARP::IntegerNode; end

# Represents a regular expression literal that contains interpolation.
#
#     /foo #{bar} baz/
#     ^^^^^^^^^^^^^^^^
class YARP::InterpolatedRegularExpressionNode
  sig { returns(YARP::Location) }
  attr_reader :opening_loc

  sig { returns(T::Array[YARP::Node]) }
  attr_reader :parts

  sig { returns(YARP::Location) }
  attr_reader :closing_loc

  sig { returns(Integer) }
  attr_reader :flags
end

# Represents a string literal that contains interpolation.
#
#     "foo #{bar} baz"
#     ^^^^^^^^^^^^^^^^
class YARP::InterpolatedStringNode
  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :opening_loc

  sig { returns(T::Array[YARP::Node]) }
  attr_reader :parts

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :closing_loc
end

# Represents a symbol literal that contains interpolation.
#
#     :"foo #{bar} baz"
#     ^^^^^^^^^^^^^^^^^
class YARP::InterpolatedSymbolNode
  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :opening_loc

  sig { returns(T::Array[YARP::Node]) }
  attr_reader :parts

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :closing_loc
end

# Represents an xstring literal that contains interpolation.
#
#     `foo #{bar} baz`
#     ^^^^^^^^^^^^^^^^
class YARP::InterpolatedXStringNode
  sig { returns(YARP::Location) }
  attr_reader :opening_loc

  sig { returns(T::Array[YARP::Node]) }
  attr_reader :parts

  sig { returns(YARP::Location) }
  attr_reader :closing_loc
end

# Represents a hash literal without opening and closing braces.
#
#     foo(a: b)
#         ^^^^
class YARP::KeywordHashNode
  sig { returns(T::Array[YARP::Node]) }
  attr_reader :elements
end

# Represents a keyword parameter to a method, block, or lambda definition.
#
#     def a(b:)
#           ^^
#     end
#
#     def a(b: 1)
#           ^^^^
#     end
class YARP::KeywordParameterNode
  sig { returns(Symbol) }
  attr_reader :name

  sig { returns(YARP::Location) }
  attr_reader :name_loc

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :value
end

# Represents a keyword rest parameter to a method, block, or lambda definition.
#
#     def a(**b)
#           ^^^
#     end
class YARP::KeywordRestParameterNode
  sig { returns(T.nilable(Symbol)) }
  attr_reader :name

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :name_loc

  sig { returns(YARP::Location) }
  attr_reader :operator_loc
end

# Represents using a lambda literal (not the lambda method call).
#
#     ->(value) { value * 2 }
#     ^^^^^^^^^^^^^^^^^^^^^^^
class YARP::LambdaNode
  sig { returns(T::Array[Symbol]) }
  attr_reader :locals

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Location) }
  attr_reader :opening_loc

  sig { returns(YARP::Location) }
  attr_reader :closing_loc

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :parameters

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :body
end

# Represents the use of the `&&=` operator for assignment to a local variable.
#
#     target &&= value
#     ^^^^^^^^^^^^^^^^
class YARP::LocalVariableAndWriteNode
  sig { returns(YARP::Location) }
  attr_reader :name_loc

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Node) }
  attr_reader :value

  sig { returns(Symbol) }
  attr_reader :name

  sig { returns(Integer) }
  attr_reader :depth
end

# Represents assigning to a local variable using an operator that isn't `=`.
#
#     target += value
#     ^^^^^^^^^^^^^^^
class YARP::LocalVariableOperatorWriteNode
  sig { returns(YARP::Location) }
  attr_reader :name_loc

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Node) }
  attr_reader :value

  sig { returns(Symbol) }
  attr_reader :name

  sig { returns(Symbol) }
  attr_reader :operator

  sig { returns(Integer) }
  attr_reader :depth
end

# Represents the use of the `||=` operator for assignment to a local variable.
#
#     target ||= value
#     ^^^^^^^^^^^^^^^^
class YARP::LocalVariableOrWriteNode
  sig { returns(YARP::Location) }
  attr_reader :name_loc

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Node) }
  attr_reader :value

  sig { returns(Symbol) }
  attr_reader :name

  sig { returns(Integer) }
  attr_reader :depth
end

# Represents reading a local variable. Note that this requires that a local
# variable of the same name has already been written to in the same scope,
# otherwise it is parsed as a method call.
#
#     foo
#     ^^^
class YARP::LocalVariableReadNode
  sig { returns(Symbol) }
  attr_reader :name

  sig { returns(Integer) }
  attr_reader :depth
end

# Represents writing to a local variable in a context that doesn't have an explicit value.
#
#     foo, bar = baz
#     ^^^  ^^^
class YARP::LocalVariableTargetNode
  sig { returns(Symbol) }
  attr_reader :name

  sig { returns(Integer) }
  attr_reader :depth
end

# Represents writing to a local variable.
#
#     foo = 1
#     ^^^^^^^
class YARP::LocalVariableWriteNode
  sig { returns(Symbol) }
  attr_reader :name

  sig { returns(Integer) }
  attr_reader :depth

  sig { returns(YARP::Location) }
  attr_reader :name_loc

  sig { returns(YARP::Node) }
  attr_reader :value

  sig { returns(YARP::Location) }
  attr_reader :operator_loc
end

# Represents the use of the modifier `in` operator.
#
#     foo in bar
#     ^^^^^^^^^^
class YARP::MatchPredicateNode
  sig { returns(YARP::Node) }
  attr_reader :value

  sig { returns(YARP::Node) }
  attr_reader :pattern

  sig { returns(YARP::Location) }
  attr_reader :operator_loc
end

# Represents the use of the `=>` operator.
#
#     foo => bar
#     ^^^^^^^^^^
class YARP::MatchRequiredNode
  sig { returns(YARP::Node) }
  attr_reader :value

  sig { returns(YARP::Node) }
  attr_reader :pattern

  sig { returns(YARP::Location) }
  attr_reader :operator_loc
end

# Represents a node that is missing from the source and results in a syntax
# error.
class YARP::MissingNode; end

# Represents a module declaration involving the `module` keyword.
#
#     module Foo end
#     ^^^^^^^^^^^^^^
class YARP::ModuleNode
  sig { returns(T::Array[Symbol]) }
  attr_reader :locals

  sig { returns(YARP::Location) }
  attr_reader :module_keyword_loc

  sig { returns(YARP::Node) }
  attr_reader :constant_path

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :body

  sig { returns(YARP::Location) }
  attr_reader :end_keyword_loc

  sig { returns(Symbol) }
  attr_reader :name
end

# Represents a multi-target expression.
#
#     a, b, c = 1, 2, 3
#     ^^^^^^^
class YARP::MultiTargetNode
  sig { returns(T::Array[YARP::Node]) }
  attr_reader :targets

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :lparen_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :rparen_loc
end

# Represents a write to a multi-target expression.
#
#     a, b, c = 1, 2, 3
#     ^^^^^^^^^^^^^^^^^
class YARP::MultiWriteNode
  sig { returns(T::Array[YARP::Node]) }
  attr_reader :targets

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :lparen_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :rparen_loc

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Node) }
  attr_reader :value
end

# Represents the use of the `next` keyword.
#
#     next 1
#     ^^^^^^
class YARP::NextNode
  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :arguments

  sig { returns(YARP::Location) }
  attr_reader :keyword_loc
end

# Represents the use of the `nil` keyword.
#
#     nil
#     ^^^
class YARP::NilNode; end

# Represents the use of `**nil` inside method arguments.
#
#     def a(**nil)
#           ^^^^^
#     end
class YARP::NoKeywordsParameterNode
  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Location) }
  attr_reader :keyword_loc
end

# Represents reading a numbered reference to a capture in the previous match.
#
#     $1
#     ^^
class YARP::NumberedReferenceReadNode
  sig { returns(Integer) }
  attr_reader :number
end

# Represents an optional parameter to a method, block, or lambda definition.
#
#     def a(b = 1)
#           ^^^^^
#     end
class YARP::OptionalParameterNode
  sig { returns(Symbol) }
  attr_reader :name

  sig { returns(YARP::Location) }
  attr_reader :name_loc

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Node) }
  attr_reader :value
end

# Represents the use of the `||` operator or the `or` keyword.
#
#     left or right
#     ^^^^^^^^^^^^^
class YARP::OrNode
  sig { returns(YARP::Node) }
  attr_reader :left

  sig { returns(YARP::Node) }
  attr_reader :right

  sig { returns(YARP::Location) }
  attr_reader :operator_loc
end

# Represents the list of parameters on a method, block, or lambda definition.
#
#     def a(b, c, d)
#           ^^^^^^^
#     end
class YARP::ParametersNode
  sig { returns(T::Array[YARP::Node]) }
  attr_reader :requireds

  sig { returns(T::Array[YARP::Node]) }
  attr_reader :optionals

  sig { returns(T::Array[YARP::Node]) }
  attr_reader :posts

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :rest

  sig { returns(T::Array[YARP::Node]) }
  attr_reader :keywords

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :keyword_rest

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :block
end

# Represents a parenthesized expression
#
#     (10 + 34)
#     ^^^^^^^^^
class YARP::ParenthesesNode
  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :body

  sig { returns(YARP::Location) }
  attr_reader :opening_loc

  sig { returns(YARP::Location) }
  attr_reader :closing_loc
end

# Represents the use of the `^` operator for pinning an expression in a
# pattern matching expression.
#
#     foo in ^(bar)
#            ^^^^^^
class YARP::PinnedExpressionNode
  sig { returns(YARP::Node) }
  attr_reader :expression

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Location) }
  attr_reader :lparen_loc

  sig { returns(YARP::Location) }
  attr_reader :rparen_loc
end

# Represents the use of the `^` operator for pinning a variable in a pattern
# matching expression.
#
#     foo in ^bar
#            ^^^^
class YARP::PinnedVariableNode
  sig { returns(YARP::Node) }
  attr_reader :variable

  sig { returns(YARP::Location) }
  attr_reader :operator_loc
end

# Represents the use of the `END` keyword.
#
#     END { foo }
#     ^^^^^^^^^^^
class YARP::PostExecutionNode
  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :statements

  sig { returns(YARP::Location) }
  attr_reader :keyword_loc

  sig { returns(YARP::Location) }
  attr_reader :opening_loc

  sig { returns(YARP::Location) }
  attr_reader :closing_loc
end

# Represents the use of the `BEGIN` keyword.
#
#     BEGIN { foo }
#     ^^^^^^^^^^^^^
class YARP::PreExecutionNode
  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :statements

  sig { returns(YARP::Location) }
  attr_reader :keyword_loc

  sig { returns(YARP::Location) }
  attr_reader :opening_loc

  sig { returns(YARP::Location) }
  attr_reader :closing_loc
end

# The top level node of any parse tree.
class YARP::ProgramNode
  sig { returns(T::Array[Symbol]) }
  attr_reader :locals

  sig { returns(YARP::Node) }
  attr_reader :statements
end

# Represents the use of the `..` or `...` operators.
#
#     1..2
#     ^^^^
#
#     c if a =~ /left/ ... b =~ /right/
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
class YARP::RangeNode
  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :left

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :right

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(Integer) }
  attr_reader :flags
end

# Represents a rational number literal.
#
#     1.0r
#     ^^^^
class YARP::RationalNode
  sig { returns(YARP::Node) }
  attr_reader :numeric
end

# Represents the use of the `redo` keyword.
#
#     redo
#     ^^^^
class YARP::RedoNode; end

# Represents a regular expression literal with no interpolation.
#
#     /foo/i
#     ^^^^^^
class YARP::RegularExpressionNode
  sig { returns(YARP::Location) }
  attr_reader :opening_loc

  sig { returns(YARP::Location) }
  attr_reader :content_loc

  sig { returns(YARP::Location) }
  attr_reader :closing_loc

  sig { returns(String) }
  attr_reader :unescaped

  sig { returns(Integer) }
  attr_reader :flags
end

# Represents a destructured required parameter node.
#
#     def foo((bar, baz))
#             ^^^^^^^^^^
#     end
class YARP::RequiredDestructuredParameterNode
  sig { returns(T::Array[YARP::Node]) }
  attr_reader :parameters

  sig { returns(YARP::Location) }
  attr_reader :opening_loc

  sig { returns(YARP::Location) }
  attr_reader :closing_loc
end

# Represents a required parameter to a method, block, or lambda definition.
#
#     def a(b)
#           ^
#     end
class YARP::RequiredParameterNode
  sig { returns(Symbol) }
  attr_reader :name
end

# Represents an expression modified with a rescue.
#
#   foo rescue nil
#   ^^^^^^^^^^^^^^
class YARP::RescueModifierNode
  sig { returns(YARP::Node) }
  attr_reader :expression

  sig { returns(YARP::Location) }
  attr_reader :keyword_loc

  sig { returns(YARP::Node) }
  attr_reader :rescue_expression
end

# Represents a rescue statement.
#
#     begin
#     rescue Foo, *splat, Bar => ex
#     ^^^^^^
#       foo
#     end
#
# `Foo, *splat, Bar` are in the `exceptions` field.
# `ex` is in the `exception` field.
class YARP::RescueNode
  sig { returns(YARP::Location) }
  attr_reader :keyword_loc

  sig { returns(T::Array[YARP::Node]) }
  attr_reader :exceptions

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :operator_loc

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :reference

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :statements

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :consequent
end

# Represents a rest parameter to a method, block, or lambda definition.
#
#     def a(*b)
#           ^^
#     end
class YARP::RestParameterNode
  sig { returns(T.nilable(Symbol)) }
  attr_reader :name

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :name_loc

  sig { returns(YARP::Location) }
  attr_reader :operator_loc
end

# Represents the use of the `retry` keyword.
#
#     retry
#     ^^^^^
class YARP::RetryNode; end

# Represents the use of the `return` keyword.
#
#     return 1
#     ^^^^^^^^
class YARP::ReturnNode
  sig { returns(YARP::Location) }
  attr_reader :keyword_loc

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :arguments
end

# Represents the `self` keyword.
#
#     self
#     ^^^^
class YARP::SelfNode; end

# Represents a singleton class declaration involving the `class` keyword.
#
#     class << self end
#     ^^^^^^^^^^^^^^^^^
class YARP::SingletonClassNode
  sig { returns(T::Array[Symbol]) }
  attr_reader :locals

  sig { returns(YARP::Location) }
  attr_reader :class_keyword_loc

  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(YARP::Node) }
  attr_reader :expression

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :body

  sig { returns(YARP::Location) }
  attr_reader :end_keyword_loc
end

# Represents the use of the `__ENCODING__` keyword.
#
#     __ENCODING__
#     ^^^^^^^^^^^^
class YARP::SourceEncodingNode; end

# Represents the use of the `__FILE__` keyword.
#
#     __FILE__
#     ^^^^^^^^
class YARP::SourceFileNode
  sig { returns(String) }
  attr_reader :filepath
end

# Represents the use of the `__LINE__` keyword.
#
#     __LINE__
#     ^^^^^^^^
class YARP::SourceLineNode; end

# Represents the use of the splat operator.
#
#     [*a]
#      ^^
class YARP::SplatNode
  sig { returns(YARP::Location) }
  attr_reader :operator_loc

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :expression
end

# Represents a set of statements contained within some scope.
#
#     foo; bar; baz
#     ^^^^^^^^^^^^^
class YARP::StatementsNode
  sig { returns(T::Array[YARP::Node]) }
  attr_reader :body
end

# Represents the use of compile-time string concatenation.
#
#     "foo" "bar"
#     ^^^^^^^^^^^
class YARP::StringConcatNode
  sig { returns(YARP::Node) }
  attr_reader :left

  sig { returns(YARP::Node) }
  attr_reader :right
end

# Represents a string literal, a string contained within a `%w` list, or
# plain string content within an interpolated string.
#
#     "foo"
#     ^^^^^
#
#     %w[foo]
#        ^^^
#
#     "foo #{bar} baz"
#      ^^^^      ^^^^
class YARP::StringNode
  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :opening_loc

  sig { returns(YARP::Location) }
  attr_reader :content_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :closing_loc

  sig { returns(String) }
  attr_reader :unescaped
end

# Represents the use of the `super` keyword with parentheses or arguments.
#
#     super()
#     ^^^^^^^
#
#     super foo, bar
#     ^^^^^^^^^^^^^^
class YARP::SuperNode
  sig { returns(YARP::Location) }
  attr_reader :keyword_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :lparen_loc

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :arguments

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :rparen_loc

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :block
end

# Represents a symbol literal or a symbol contained within a `%i` list.
#
#     :foo
#     ^^^^
#
#     %i[foo]
#        ^^^
class YARP::SymbolNode
  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :opening_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :value_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :closing_loc

  sig { returns(String) }
  attr_reader :unescaped
end

# Represents the use of the literal `true` keyword.
#
#     true
#     ^^^^
class YARP::TrueNode; end

# Represents the use of the `undef` keyword.
#
#     undef :foo, :bar, :baz
#     ^^^^^^^^^^^^^^^^^^^^^^
class YARP::UndefNode
  sig { returns(T::Array[YARP::Node]) }
  attr_reader :names

  sig { returns(YARP::Location) }
  attr_reader :keyword_loc
end

# Represents the use of the `unless` keyword, either in the block form or the modifier form.
#
#     bar unless foo
#     ^^^^^^^^^^^^^^
#
#     unless foo then bar end
#     ^^^^^^^^^^^^^^^^^^^^^^^
class YARP::UnlessNode
  sig { returns(YARP::Location) }
  attr_reader :keyword_loc

  sig { returns(YARP::Node) }
  attr_reader :predicate

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :statements

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :consequent

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :end_keyword_loc
end

# Represents the use of the `until` keyword, either in the block form or the modifier form.
#
#     bar until foo
#     ^^^^^^^^^^^^^
#
#     until foo do bar end
#     ^^^^^^^^^^^^^^^^^^^^
class YARP::UntilNode
  sig { returns(YARP::Location) }
  attr_reader :keyword_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :closing_loc

  sig { returns(YARP::Node) }
  attr_reader :predicate

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :statements

  sig { returns(Integer) }
  attr_reader :flags
end

# Represents the use of the `when` keyword within a case statement.
#
#     case true
#     when true
#     ^^^^^^^^^
#     end
class YARP::WhenNode
  sig { returns(YARP::Location) }
  attr_reader :keyword_loc

  sig { returns(T::Array[YARP::Node]) }
  attr_reader :conditions

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :statements
end

# Represents the use of the `while` keyword, either in the block form or the modifier form.
#
#     bar while foo
#     ^^^^^^^^^^^^^
#
#     while foo do bar end
#     ^^^^^^^^^^^^^^^^^^^^
class YARP::WhileNode
  sig { returns(YARP::Location) }
  attr_reader :keyword_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :closing_loc

  sig { returns(YARP::Node) }
  attr_reader :predicate

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :statements

  sig { returns(Integer) }
  attr_reader :flags
end

# Represents an xstring literal with no interpolation.
#
#     `foo`
#     ^^^^^
class YARP::XStringNode
  sig { returns(YARP::Location) }
  attr_reader :opening_loc

  sig { returns(YARP::Location) }
  attr_reader :content_loc

  sig { returns(YARP::Location) }
  attr_reader :closing_loc

  sig { returns(String) }
  attr_reader :unescaped
end

# Represents the use of the `yield` keyword.
#
#     yield 1
#     ^^^^^^^
class YARP::YieldNode
  sig { returns(YARP::Location) }
  attr_reader :keyword_loc

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :lparen_loc

  sig { returns(T.nilable(YARP::Node)) }
  attr_reader :arguments

  sig { returns(T.nilable(YARP::Location)) }
  attr_reader :rparen_loc
end
